# Use the slim Python 3.10 image
FROM ubuntu:24.04

RUN apt-get update && \
        apt-get install -y python3 python3-pip python3-venv python3-dev \
        python3-setuptools \
        python3-wheel \
        python3-coverage \
        git \
        build-essential \
        curl \
        lcov \
        llvm \
        wget \
        libssl-dev
        # \ && apt-get clean && rm -rf /var/lib/apt/lists/*

# install CMAKE v 3.26 - Pytket
RUN mkdir -p /tmp/cmake && \
    cd /tmp/cmake && \
    wget https://cmake.org/files/v3.26/cmake-3.26.1.tar.gz && \
    tar -xzvf cmake-3.26.1.tar.gz
ENV OPENSSL_ROOT_DIR=/usr/lib/ssl
RUN cd /tmp/cmake/cmake-3.26.1/ && \
    ./bootstrap && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -rf /tmp/cmake

ARG UID=1000
ARG GID=1000

RUN groupadd -g $GID regularuser && \
    useradd -m -u $UID -g $GID -s /bin/bash regularuser

# Set environment variable to avoid issues with pip and locales
ENV PYTHONUNBUFFERED=1
ENV LANG=C.UTF-8


# Install Python packages needed for building and testing
USER regularuser
WORKDIR /home/regularuser
RUN python3 -m venv .venv
RUN . .venv/bin/activate && pip install --no-cache-dir \
    coverage==7.6.2 \
    cython \
    unidiff \
    click \
    rich \
    pytest \
    pytest-cov \
    stestr \
    ddt \
    lcov_cobertura==1.6 \
    pytest \
    pytest-cov \
    conan


# RUST - SPECIFIC

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/home/regularuser/.cargo/bin:${PATH}"

RUN rustup component add llvm-tools-preview
RUN cargo install cargo-llvm-cov grcov

# Build and install qiskit-terra with coverage instrumentation
ENV CARGO_INCREMENTAL=0 \
    RUSTFLAGS="-Cinstrument-coverage" \
    LLVM_PROFILE_FILE="qiskit-%p-%m.profraw" \
    PYTHON="coverage run --source qiskit --parallel-mode" \
    QISKIT_TEST_CAPTURE_STREAMS=1 \
    QISKIT_PARALLEL=FALSE


# PYTKET - SPECIFIC

# Install Pytket version 1.33.1

WORKDIR /home/regularuser
RUN git clone https://github.com/CQCL/tket.git
WORKDIR /home/regularuser/tket
RUN git checkout tags/v1.33.1

USER root
RUN apt-get update && apt-get upgrade -y
RUN apt-get update && \
    apt-get install -y \
        build-essential \
        wget \
        libgmp-dev \
        libmpfr-dev \
        libmpc-dev \
        software-properties-common \
        python3-launchpadlib


# WORKDIR /home/regularuser/gcc_install
# RUN apt-get install -y build-essential libmpfr-dev libgmp3-dev libmpc-dev && \
#     wget http://ftp.gnu.org/gnu/gcc/gcc-14.1.0/gcc-14.1.0.tar.gz && \
#     tar -xf gcc-14.1.0.tar.gz
# RUN cd gcc-14.1.0 && \
#     ./configure -v --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --prefix=/usr/local/gcc-14.1.0 --enable-checking=release --enable-languages=c,c++ --disable-multilib --program-suffix=-14.1.0 && \
#     make && \
#     make install
USER regularuser

RUN . ../.venv/bin/activate && \
    conan profile detect && \
    DEFAULT_PROFILE_PATH=$(conan profile path default) && \
    PROFILE_PATH=./conan-profiles/ubuntu-24.04 && \
    diff ${DEFAULT_PROFILE_PATH} ${PROFILE_PATH} || true && \
    cp ${PROFILE_PATH} ${DEFAULT_PROFILE_PATH} && \
    conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --index 0


# RUN sed -i '/cmake.configure()/a\        cmake.configure(variables={"CMAKE_CXX_FLAGS": "-fprofile-arcs -ftest-coverage", "CMAKE_C_FLAGS": "-fprofile-arcs -ftest-coverage", "CMAKE_EXE_LINKER_FLAGS": "-lgcov", "CMAKE_SHARED_LINKER_FLAGS": "-lgcov"})' /home/regularuser/tket/tket/conanfile.py


# add this option to enable coverage: -o tket:profile_coverage=True
RUN . ../.venv/bin/activate && \
    conan create tket --version 1.3.32 --user=tket --channel=stable --build="tket*" -o "boost/*":header_only=True -o "tklog/*":shared=True -o "tket/*":shared=True -tf "" -s build_type=Debug -o "tket/*":profile_coverage=True
# conan install --requires tket/1.3.32@tket/stable -o "boost/*":header_only=True -o "tklog/*":shared=True -o "tket/*":shared=True -o "tket/*":profile_coverage=True -o "test-tket/*":with_coverage=True -o with_test=True
USER root
RUN apt-get update && apt-get install -y gcovr
RUN echo 'root:Docker!' | chpasswd
USER regularuser


    # conan build tket --user=tket --channel=stable -s build_type=Debug --build=missing -o "boost/*":header_only=True -o "tket/*":profile_coverage=True -o "test-tket/*":with_coverage=True -o with_test=True -of build/tket

#     # conan create tket --user tket --channel stable -s build_type=Debug  -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True -o tket/*:profile_coverage=True --build=missing  -tf ""

RUN . ../.venv/bin/activate && \
    conan remove -c "pybind11/*" && \
    conan create recipes/pybind11 -s build_type=Debug -o "tket/*":profile_coverage=True && \
    conan create recipes/pybind11_json/all --version=0.2.14  -s build_type=Debug -o "tket/*":profile_coverage=True


# install pytket
RUN sed -i 's/"--build=missing",/"--build=missing", "-o", '\''tket\/\*:profile_coverage=True'\'', "-s", "build_type=Debug",/' pytket/setup.py

RUN . ../.venv/bin/activate && cd pytket && python -m pip install -e . -v  && pip install -r tests/requirements.txt


# # RUN source <(cargo llvm-cov show-env --export-prefix)
# # RUN export CARGO_TARGET_DIR=$CARGO_LLVM_COV_TARGET_DIR
# # RUN export CARGO_INCREMENTAL=1
# # RUN grcov . --binary-path target/debug/ --source-dir . --output-type lcov --output-path rust.info --llvm --branch --parallel --keep-only 'crates/*'

# RUN rustup component add llvm-tools-preview

# RUN . .venv/bin/activate && pip install lcov_cobertura
# RUN cargo install rustfilt

# COPY . /home/regularuser/qiskit
# RUN echo "source .venv/bin/activate" >> /home/regularuser/.bashrc
# RUN rm qiskit-*.profraw

# RUN mkdir -p /home/regularuser/app && chown -R regularuser:regularuser /home/regularuser/app

# RUN . .venv/bin/activate && pip install \
#     qiskit-aer==0.15.1 \
#     qiskit-ibm-runtime==0.29.0 \
#     pytket==1.32.0 \
#     pytket-qiskit==0.56.0 \
#     PennyLane==0.40.0 \
#     PennyLane-qiskit==0.40.0 \
#     mqt.qcec==2.8.1 \
#     bqskit==1.2.0 \
#     pyzx==0.8.0 \
#     slipcover==1.0.15 \
#     pytest==8.3.3 \
#     click \
#     numpy \
#     scipy \
#     rich \
#     matplotlib \
#     pandas \
#     seaborn


# # Set the default command to run the Python script
CMD ["bash"]