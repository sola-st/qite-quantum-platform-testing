# Demo configuration file for QITE cross-platform testing with quantum assembly.

# See the inline comments for more information.

# Define the batch size for processing quantum programs.
# if the flag --continuous_fuzzing is passed to entry.py script
# the commands are repeated in a loop.
batch_size: 100

# Define the budget time in seconds for the entire process.
# Including if the flag --continuous_fuzzing is passed to entry.py script.
budget_time_sec: 100

commands:

  # COMPONENT 1: Generators
  # Generates quantum program batches using:
  # qite.generators.qasm_code_gen to generate QASM programs directly.
  # qite.generators.qiskit_code_gen to generate Qiskit programs that are then
  # converted to QASM using qite.convert_to_qasm.
  # The target platforms are Qiskit, Pytket, and Pennylane.
  # The BQSKIT platform is not included due to limitations in the gate set.

  - module: qite.generators.qasm_code_gen
    arguments:
      num_qubits: 11  # BQSKIT LIMITATION: max 10 qubits
      num_gates: 15
      # seed: 42
      only_qregs: True
      final_measure: False
      num_programs: <<HALF_BATCH_SIZE>>
      output_dir: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>
    config:
      gate_set: [
        'h', 'x', 'y', 'z', 'cx', 'cz', 'rx', 'ry', 'rz', 's', 't', 'tdg',
        'sdg', 'swap', 'ccx', 'cswap', 'crz',
        'u3', 'u2', 'u1', 'cx', 'id', 'u0', 'u', 'p', 'x', 'y', 'z', 'h',
        's', 'sdg', 't', 'tdg', 'rx', 'ry', 'rz', 'sx', 'sxdg', 'cz', 'cy',
        'swap', 'ch', 'ccx', 'cswap', 'crx', 'cry', 'crz', 'cu1', 'cp',
        'cu3', 'csx', 'cu', 'rxx', 'rzz',
        # BQSKIT LIMITATION: gates not supported
        'rccx', 'rc3x', 'c3x', 'c3sqrtx', 'c4x'
      ]

  - module: qite.generators.qiskit_code_gen
    arguments:
      num_qubits: 11  # BQSKIT LIMITATION: max 10 qubits
      num_gates: 15
      # seed: 42
      only_qregs: True
      final_measure: False
      num_programs: <<HALF_BATCH_SIZE>>
      output_dir: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>
    config:
      gate_set: [
        'barrier', 'ccx', 'ccz', 'cp', 'cx', 'crx', 'cry', 'crz', 'cs',
        'csdg', 'cswap', 'csx', 'cu', 'cy', 'cz', 'dcx', 'ecr', 'h', 'id',
        'iswap', 'mcp', 'mcrx', 'mcry', 'mcrz', 'mcx', 'p', 'r', 'rcccx',
        'rccx', 'rv', 'rx', 'rxx', 'ry', 'ryy', 'rz', 'rzx', 'rzz', 's',
        'sdg', 'swap',
      ]

  - module: qite.convert_to_qasm
    arguments:
      input_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>
    config:
      program_id_range: [0, <<BATCH_SIZE>>]
      platforms: [
        'qiskit', 'pytket', 'pennylane',
        # 'bqskit'
      ]
      coverage: True
      template_coverage_file: config/template_coverage/qite.cover

  # COMPONENT 2: ITE process
  # Then it refines programs iteratively using a qite_loop via the ITE process.
  # Any error is logged in the `error` subfolder in the input folder.
  - module: qite.qite_loop
    arguments:
      input_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>
      number_of_rounds: 5
      n_transform_iter: 1
    config:
      platforms: [
        'qiskit', 'pytket', 'pennylane',
        # 'bqskit'
      ]
      coverage: True
      template_coverage_file: config/template_coverage/qite.cover
      program_id_range: [0, <<BATCH_SIZE>>]
      coverage_every_round: False

  # OPTIONAL: Coverage - Only in Docker
  # Executes coverage scripts to assess the line coverage of the programs.
  # - module: qite.run_coverage_scripts
  #   arguments:
  #     input_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>
  #     output_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>/coverage


  # COMPONENT 3: Bug detection
  # Identifies program behavior inconsistencies across platforms.
  - module: qite.spot_divergences
    arguments:
      input_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>
      comparison_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>/comparison
      metadata_folder: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>/metadata
    config:
      program_id_range: [0, <<BATCH_SIZE>>]

  # OPTIONAL: Inspect warnings - Crashes
  # - module: qite.explore_warnings
  #   arguments:
  #     folder_path: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>/comparison
  #     top_k: 10
  #     target_field: 'equivalence'

  # OPTIONAL: Inspect warnings - Inconsistencies
  # - module: qite.explore_warnings
  #   arguments:
  #     folder_path: program_bank/<<THIS_FILE_NAME>>/<<RUN_FOLDER>>/error
  #     top_k: 10
  #     target_field: 'error'