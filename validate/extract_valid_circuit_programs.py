"""Extract all the valid LLM-generated programs from the raw output.

It scans the input folder and inspects the content of all the .py files (they
contains the raw LLM output). Then it extracts the code in between the tags
```python and ``` and stores that followed by the given snippet as new file to a
the output folder.

Snippet to append:
```
from qiskit import QuantumCircuit
def find_quantum_circuits():
    quantum_circuits = {
        name: obj for name, obj in globals().items()
        if isinstance(obj, QuantumCircuit)
    }
    return quantum_circuits
qc_objects = find_quantum_circuits()
for name, qc in qc_objects.items():
    print(f"Found QuantumCircuit: {name}, with {qc.num_qubits} qubits")
print("END_CROSS_PLATFORM_TEST")
```

--input_folder: str folder with the .py files generated by the LLM
--output_folder: str, where to store the newly extracted programs.


# Implementation
- it uses click v8 library
- it has a simple main
- the new file is stored with the same name of the original file


# Style
- it uses subfunction appropriately
- always use named arguments when calling a function
    (except for standard library functions)
- keep the style consistent to pep8 (max 80 char)
- to print the logs it uses the console from Rich library
- make sure to have docstring for each subfunction and keep it brief to the point
(also avoid comments on top of the functions)
- it uses os.path every time that it is dealing with path composition
- it uses pathlib every time that paths are checked or created.

"""
import os
import pathlib
import re
import click
from rich.console import Console

console = Console()

SNIPPET_TO_APPEND = """
from qiskit import QuantumCircuit
def find_quantum_circuits():
    quantum_circuits = {
        name: obj for name, obj in globals().items()
        if isinstance(obj, QuantumCircuit)
    }
    return quantum_circuits
qc_objects = find_quantum_circuits()
for name, qc in qc_objects.items():
    print(f"Found QuantumCircuit: {name}, with {qc.num_qubits} qubits")
print("END_CROSS_PLATFORM_TEST")
"""


def extract_code_blocks(file_content):
    """Extract code blocks between ```python and ```."""
    pattern = r'```python(.*?)```'
    matches = re.findall(pattern, file_content, re.DOTALL)
    return matches


def process_file(file_path, output_folder):
    """Process a single file, extracting valid code and appending the snippet."""
    console.log(f"Processing file: {file_path}")

    try:
        with open(file_path, 'r') as file:
            content = file.read()

        code_blocks = extract_code_blocks(content)
        if not code_blocks:
            console.log(f"No valid code blocks found in {file_path}")
            return

        base_name = os.path.basename(file_path)
        output_file_path = os.path.join(output_folder, base_name)

        with open(output_file_path, 'w') as output_file:
            for block in code_blocks:
                output_file.write(block.strip() + "\n")
            output_file.write(SNIPPET_TO_APPEND)

        console.log(f"Extracted code written to {output_file_path}")

    except Exception as e:
        console.log(
            f"Failed to process {file_path}: {str(e)}", style="bold red")


@click.command()
@click.option('--input_folder', required=True, type=str,
              help="Folder with the .py files generated by the LLM")
@click.option('--output_folder', required=True, type=str,
              help="Where to store the newly extracted programs")
def main(input_folder, output_folder):
    """Main function that processes all files in the input folder."""
    console.log(
        f"Starting the extraction process from {input_folder} to {output_folder}")

    # Create output folder if it does not exist
    pathlib.Path(output_folder).mkdir(parents=True, exist_ok=True)

    # Iterate over all .py files in the input folder
    for root, _, files in os.walk(input_folder):
        for file_name in files:
            if file_name.endswith('.py'):
                file_path = os.path.join(root, file_name)
                process_file(file_path=file_path, output_folder=output_folder)

    console.log("Extraction process completed.")


if __name__ == "__main__":
    main()
